// coverage:ignore-file
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// API for enumerating and introspecting local devices
class Libudev {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Libudev(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Libudev.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<udev_t> ref(
    ffi.Pointer<udev_t> udev,
  ) {
    return _ref(
      udev,
    );
  }

  late final _refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_t> Function(ffi.Pointer<udev_t>)>>('udev_ref');
  late final _ref =
      _refPtr.asFunction<ffi.Pointer<udev_t> Function(ffi.Pointer<udev_t>)>();

  ffi.Pointer<udev_t> unref(
    ffi.Pointer<udev_t> udev,
  ) {
    return _unref(
      udev,
    );
  }

  late final _unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_t> Function(ffi.Pointer<udev_t>)>>('udev_unref');
  late final _unref =
      _unrefPtr.asFunction<ffi.Pointer<udev_t> Function(ffi.Pointer<udev_t>)>();

  ffi.Pointer<udev_t> new_() {
    return _new_();
  }

  late final _new_Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<udev_t> Function()>>('udev_new');
  late final _new_ = _new_Ptr.asFunction<ffi.Pointer<udev_t> Function()>();

  ffi.Pointer<ffi.Void> get_userdata(
    ffi.Pointer<udev_t> udev,
  ) {
    return _get_userdata(
      udev,
    );
  }

  late final _get_userdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<udev_t>)>>('udev_get_userdata');
  late final _get_userdata = _get_userdataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<udev_t>)>();

  void set_userdata(
    ffi.Pointer<udev_t> udev,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _set_userdata(
      udev,
      userdata,
    );
  }

  late final _set_userdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<udev_t>,
              ffi.Pointer<ffi.Void>)>>('udev_set_userdata');
  late final _set_userdata = _set_userdataPtr
      .asFunction<void Function(ffi.Pointer<udev_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<udev_list_entry_t> list_entry_get_next(
    ffi.Pointer<udev_list_entry_t> list_entry,
  ) {
    return _list_entry_get_next(
      list_entry,
    );
  }

  late final _list_entry_get_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_list_entry_t>)>>('udev_list_entry_get_next');
  late final _list_entry_get_next = _list_entry_get_nextPtr.asFunction<
      ffi.Pointer<udev_list_entry_t> Function(
          ffi.Pointer<udev_list_entry_t>)>();

  ffi.Pointer<udev_list_entry_t> list_entry_get_by_name(
    ffi.Pointer<udev_list_entry_t> list_entry,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _list_entry_get_by_name(
      list_entry,
      name,
    );
  }

  late final _list_entry_get_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_list_entry_t>,
              ffi.Pointer<ffi.Char>)>>('udev_list_entry_get_by_name');
  late final _list_entry_get_by_name = _list_entry_get_by_namePtr.asFunction<
      ffi.Pointer<udev_list_entry_t> Function(
          ffi.Pointer<udev_list_entry_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> list_entry_get_name(
    ffi.Pointer<udev_list_entry_t> list_entry,
  ) {
    return _list_entry_get_name(
      list_entry,
    );
  }

  late final _list_entry_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_list_entry_t>)>>('udev_list_entry_get_name');
  late final _list_entry_get_name = _list_entry_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_list_entry_t>)>();

  ffi.Pointer<ffi.Char> list_entry_get_value(
    ffi.Pointer<udev_list_entry_t> list_entry,
  ) {
    return _list_entry_get_value(
      list_entry,
    );
  }

  late final _list_entry_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_list_entry_t>)>>('udev_list_entry_get_value');
  late final _list_entry_get_value = _list_entry_get_valuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_list_entry_t>)>();

  ffi.Pointer<udev_device_t> device_ref(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_ref(
      udev_device,
    );
  }

  late final _device_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device_t> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_ref');
  late final _device_ref = _device_refPtr.asFunction<
      ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_device_t> device_unref(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_unref(
      udev_device,
    );
  }

  late final _device_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device_t> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_unref');
  late final _device_unref = _device_unrefPtr.asFunction<
      ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_t> device_get_udev(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_udev(
      udev_device,
    );
  }

  late final _device_get_udevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_t> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_udev');
  late final _device_get_udev = _device_get_udevPtr
      .asFunction<ffi.Pointer<udev_t> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_device_t> device_new_from_syspath(
    ffi.Pointer<udev_t> udev,
    ffi.Pointer<ffi.Char> syspath,
  ) {
    return _device_new_from_syspath(
      udev,
      syspath,
    );
  }

  late final _device_new_from_syspathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_t>,
              ffi.Pointer<ffi.Char>)>>('udev_device_new_from_syspath');
  late final _device_new_from_syspath = _device_new_from_syspathPtr.asFunction<
      ffi.Pointer<udev_device_t> Function(
          ffi.Pointer<udev_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<udev_device_t> device_new_from_devnum(
    ffi.Pointer<udev_t> udev,
    int type,
    int devnum,
  ) {
    return _device_new_from_devnum(
      udev,
      type,
      devnum,
    );
  }

  late final _device_new_from_devnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_t>, ffi.Char,
              dev_t)>>('udev_device_new_from_devnum');
  late final _device_new_from_devnum = _device_new_from_devnumPtr.asFunction<
      ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_t>, int, int)>();

  ffi.Pointer<udev_device_t> device_new_from_subsystem_sysname(
    ffi.Pointer<udev_t> udev,
    ffi.Pointer<ffi.Char> subsystem,
    ffi.Pointer<ffi.Char> sysname,
  ) {
    return _device_new_from_subsystem_sysname(
      udev,
      subsystem,
      sysname,
    );
  }

  late final _device_new_from_subsystem_sysnamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_t>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'udev_device_new_from_subsystem_sysname');
  late final _device_new_from_subsystem_sysname =
      _device_new_from_subsystem_sysnamePtr.asFunction<
          ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_t>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<udev_device_t> device_new_from_device_id(
    ffi.Pointer<udev_t> udev,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _device_new_from_device_id(
      udev,
      id,
    );
  }

  late final _device_new_from_device_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_t>,
              ffi.Pointer<ffi.Char>)>>('udev_device_new_from_device_id');
  late final _device_new_from_device_id =
      _device_new_from_device_idPtr.asFunction<
          ffi.Pointer<udev_device_t> Function(
              ffi.Pointer<udev_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<udev_device_t> device_new_from_environment(
    ffi.Pointer<udev_t> udev,
  ) {
    return _device_new_from_environment(
      udev,
    );
  }

  late final _device_new_from_environmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device_t> Function(
              ffi.Pointer<udev_t>)>>('udev_device_new_from_environment');
  late final _device_new_from_environment = _device_new_from_environmentPtr
      .asFunction<ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_t>)>();

  ffi.Pointer<udev_device_t> device_get_parent(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_parent(
      udev_device,
    );
  }

  late final _device_get_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device_t> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_parent');
  late final _device_get_parent = _device_get_parentPtr.asFunction<
      ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_device_t> device_get_parent_with_subsystem_devtype(
    ffi.Pointer<udev_device_t> udev_device,
    ffi.Pointer<ffi.Char> subsystem,
    ffi.Pointer<ffi.Char> devtype,
  ) {
    return _device_get_parent_with_subsystem_devtype(
      udev_device,
      subsystem,
      devtype,
    );
  }

  late final _device_get_parent_with_subsystem_devtypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_device_t>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'udev_device_get_parent_with_subsystem_devtype');
  late final _device_get_parent_with_subsystem_devtype =
      _device_get_parent_with_subsystem_devtypePtr.asFunction<
          ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_device_t>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> device_get_devpath(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_devpath(
      udev_device,
    );
  }

  late final _device_get_devpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_devpath');
  late final _device_get_devpath = _device_get_devpathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_subsystem(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_subsystem(
      udev_device,
    );
  }

  late final _device_get_subsystemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_subsystem');
  late final _device_get_subsystem = _device_get_subsystemPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_devtype(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_devtype(
      udev_device,
    );
  }

  late final _device_get_devtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_devtype');
  late final _device_get_devtype = _device_get_devtypePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_syspath(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_syspath(
      udev_device,
    );
  }

  late final _device_get_syspathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_syspath');
  late final _device_get_syspath = _device_get_syspathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_sysname(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_sysname(
      udev_device,
    );
  }

  late final _device_get_sysnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_sysname');
  late final _device_get_sysname = _device_get_sysnamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_sysnum(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_sysnum(
      udev_device,
    );
  }

  late final _device_get_sysnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_sysnum');
  late final _device_get_sysnum = _device_get_sysnumPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_devnode(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_devnode(
      udev_device,
    );
  }

  late final _device_get_devnodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_devnode');
  late final _device_get_devnode = _device_get_devnodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  int device_get_is_initialized(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_is_initialized(
      udev_device,
    );
  }

  late final _device_get_is_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_device_t>)>>(
          'udev_device_get_is_initialized');
  late final _device_get_is_initialized = _device_get_is_initializedPtr
      .asFunction<int Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_list_entry_t> device_get_devlinks_list_entry(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_devlinks_list_entry(
      udev_device,
    );
  }

  late final _device_get_devlinks_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<udev_list_entry_t> Function(
                  ffi.Pointer<udev_device_t>)>>(
      'udev_device_get_devlinks_list_entry');
  late final _device_get_devlinks_list_entry =
      _device_get_devlinks_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_list_entry_t> device_get_properties_list_entry(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_properties_list_entry(
      udev_device,
    );
  }

  late final _device_get_properties_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<udev_list_entry_t> Function(
                  ffi.Pointer<udev_device_t>)>>(
      'udev_device_get_properties_list_entry');
  late final _device_get_properties_list_entry =
      _device_get_properties_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_list_entry_t> device_get_tags_list_entry(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_tags_list_entry(
      udev_device,
    );
  }

  late final _device_get_tags_list_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_tags_list_entry');
  late final _device_get_tags_list_entry =
      _device_get_tags_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_list_entry_t> device_get_current_tags_list_entry(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_current_tags_list_entry(
      udev_device,
    );
  }

  late final _device_get_current_tags_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<udev_list_entry_t> Function(
                  ffi.Pointer<udev_device_t>)>>(
      'udev_device_get_current_tags_list_entry');
  late final _device_get_current_tags_list_entry =
      _device_get_current_tags_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<udev_list_entry_t> device_get_sysattr_list_entry(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_sysattr_list_entry(
      udev_device,
    );
  }

  late final _device_get_sysattr_list_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<udev_list_entry_t> Function(
                  ffi.Pointer<udev_device_t>)>>(
      'udev_device_get_sysattr_list_entry');
  late final _device_get_sysattr_list_entry =
      _device_get_sysattr_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_property_value(
    ffi.Pointer<udev_device_t> udev_device,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _device_get_property_value(
      udev_device,
      key,
    );
  }

  late final _device_get_property_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>,
              ffi.Pointer<ffi.Char>)>>('udev_device_get_property_value');
  late final _device_get_property_value =
      _device_get_property_valuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> device_get_driver(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_driver(
      udev_device,
    );
  }

  late final _device_get_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_driver');
  late final _device_get_driver = _device_get_driverPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  int device_get_devnum(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_devnum(
      udev_device,
    );
  }

  late final _device_get_devnumPtr =
      _lookup<ffi.NativeFunction<dev_t Function(ffi.Pointer<udev_device_t>)>>(
          'udev_device_get_devnum');
  late final _device_get_devnum = _device_get_devnumPtr
      .asFunction<int Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_action(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_action(
      udev_device,
    );
  }

  late final _device_get_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_action');
  late final _device_get_action = _device_get_actionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>)>();

  int device_get_seqnum(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_seqnum(
      udev_device,
    );
  }

  late final _device_get_seqnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<udev_device_t>)>>('udev_device_get_seqnum');
  late final _device_get_seqnum = _device_get_seqnumPtr
      .asFunction<int Function(ffi.Pointer<udev_device_t>)>();

  int device_get_usec_since_initialized(
    ffi.Pointer<udev_device_t> udev_device,
  ) {
    return _device_get_usec_since_initialized(
      udev_device,
    );
  }

  late final _device_get_usec_since_initializedPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedLongLong Function(ffi.Pointer<udev_device_t>)>>(
      'udev_device_get_usec_since_initialized');
  late final _device_get_usec_since_initialized =
      _device_get_usec_since_initializedPtr
          .asFunction<int Function(ffi.Pointer<udev_device_t>)>();

  ffi.Pointer<ffi.Char> device_get_sysattr_value(
    ffi.Pointer<udev_device_t> udev_device,
    ffi.Pointer<ffi.Char> sysattr,
  ) {
    return _device_get_sysattr_value(
      udev_device,
      sysattr,
    );
  }

  late final _device_get_sysattr_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device_t>,
              ffi.Pointer<ffi.Char>)>>('udev_device_get_sysattr_value');
  late final _device_get_sysattr_value =
      _device_get_sysattr_valuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device_t>, ffi.Pointer<ffi.Char>)>();

  int device_set_sysattr_value(
    ffi.Pointer<udev_device_t> udev_device,
    ffi.Pointer<ffi.Char> sysattr,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _device_set_sysattr_value(
      udev_device,
      sysattr,
      value,
    );
  }

  late final _device_set_sysattr_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_device_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('udev_device_set_sysattr_value');
  late final _device_set_sysattr_value =
      _device_set_sysattr_valuePtr.asFunction<
          int Function(ffi.Pointer<udev_device_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int device_has_tag(
    ffi.Pointer<udev_device_t> udev_device,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _device_has_tag(
      udev_device,
      tag,
    );
  }

  late final _device_has_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_device_t>,
              ffi.Pointer<ffi.Char>)>>('udev_device_has_tag');
  late final _device_has_tag = _device_has_tagPtr.asFunction<
      int Function(ffi.Pointer<udev_device_t>, ffi.Pointer<ffi.Char>)>();

  int device_has_current_tag(
    ffi.Pointer<udev_device_t> udev_device,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _device_has_current_tag(
      udev_device,
      tag,
    );
  }

  late final _device_has_current_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_device_t>,
              ffi.Pointer<ffi.Char>)>>('udev_device_has_current_tag');
  late final _device_has_current_tag = _device_has_current_tagPtr.asFunction<
      int Function(ffi.Pointer<udev_device_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<udev_monitor_t> monitor_ref(
    ffi.Pointer<udev_monitor_t> udev_monitor,
  ) {
    return _monitor_ref(
      udev_monitor,
    );
  }

  late final _monitor_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_monitor_t> Function(
              ffi.Pointer<udev_monitor_t>)>>('udev_monitor_ref');
  late final _monitor_ref = _monitor_refPtr.asFunction<
      ffi.Pointer<udev_monitor_t> Function(ffi.Pointer<udev_monitor_t>)>();

  ffi.Pointer<udev_monitor_t> monitor_unref(
    ffi.Pointer<udev_monitor_t> udev_monitor,
  ) {
    return _monitor_unref(
      udev_monitor,
    );
  }

  late final _monitor_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_monitor_t> Function(
              ffi.Pointer<udev_monitor_t>)>>('udev_monitor_unref');
  late final _monitor_unref = _monitor_unrefPtr.asFunction<
      ffi.Pointer<udev_monitor_t> Function(ffi.Pointer<udev_monitor_t>)>();

  ffi.Pointer<udev_t> monitor_get_udev(
    ffi.Pointer<udev_monitor_t> udev_monitor,
  ) {
    return _monitor_get_udev(
      udev_monitor,
    );
  }

  late final _monitor_get_udevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_t> Function(
              ffi.Pointer<udev_monitor_t>)>>('udev_monitor_get_udev');
  late final _monitor_get_udev = _monitor_get_udevPtr
      .asFunction<ffi.Pointer<udev_t> Function(ffi.Pointer<udev_monitor_t>)>();

  ffi.Pointer<udev_monitor_t> monitor_new_from_netlink(
    ffi.Pointer<udev_t> udev,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _monitor_new_from_netlink(
      udev,
      name,
    );
  }

  late final _monitor_new_from_netlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_monitor_t> Function(ffi.Pointer<udev_t>,
              ffi.Pointer<ffi.Char>)>>('udev_monitor_new_from_netlink');
  late final _monitor_new_from_netlink =
      _monitor_new_from_netlinkPtr.asFunction<
          ffi.Pointer<udev_monitor_t> Function(
              ffi.Pointer<udev_t>, ffi.Pointer<ffi.Char>)>();

  int monitor_enable_receiving(
    ffi.Pointer<udev_monitor_t> udev_monitor,
  ) {
    return _monitor_enable_receiving(
      udev_monitor,
    );
  }

  late final _monitor_enable_receivingPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_monitor_t>)>>(
      'udev_monitor_enable_receiving');
  late final _monitor_enable_receiving = _monitor_enable_receivingPtr
      .asFunction<int Function(ffi.Pointer<udev_monitor_t>)>();

  int monitor_set_receive_buffer_size(
    ffi.Pointer<udev_monitor_t> udev_monitor,
    int size,
  ) {
    return _monitor_set_receive_buffer_size(
      udev_monitor,
      size,
    );
  }

  late final _monitor_set_receive_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_monitor_t>,
              ffi.Int)>>('udev_monitor_set_receive_buffer_size');
  late final _monitor_set_receive_buffer_size =
      _monitor_set_receive_buffer_sizePtr
          .asFunction<int Function(ffi.Pointer<udev_monitor_t>, int)>();

  int monitor_get_fd(
    ffi.Pointer<udev_monitor_t> udev_monitor,
  ) {
    return _monitor_get_fd(
      udev_monitor,
    );
  }

  late final _monitor_get_fdPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_monitor_t>)>>(
      'udev_monitor_get_fd');
  late final _monitor_get_fd = _monitor_get_fdPtr
      .asFunction<int Function(ffi.Pointer<udev_monitor_t>)>();

  ffi.Pointer<udev_device_t> monitor_receive_device(
    ffi.Pointer<udev_monitor_t> udev_monitor,
  ) {
    return _monitor_receive_device(
      udev_monitor,
    );
  }

  late final _monitor_receive_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device_t> Function(
              ffi.Pointer<udev_monitor_t>)>>('udev_monitor_receive_device');
  late final _monitor_receive_device = _monitor_receive_devicePtr.asFunction<
      ffi.Pointer<udev_device_t> Function(ffi.Pointer<udev_monitor_t>)>();

  int monitor_filter_add_match_subsystem_devtype(
    ffi.Pointer<udev_monitor_t> udev_monitor,
    ffi.Pointer<ffi.Char> subsystem,
    ffi.Pointer<ffi.Char> devtype,
  ) {
    return _monitor_filter_add_match_subsystem_devtype(
      udev_monitor,
      subsystem,
      devtype,
    );
  }

  late final _monitor_filter_add_match_subsystem_devtypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<udev_monitor_t>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'udev_monitor_filter_add_match_subsystem_devtype');
  late final _monitor_filter_add_match_subsystem_devtype =
      _monitor_filter_add_match_subsystem_devtypePtr.asFunction<
          int Function(ffi.Pointer<udev_monitor_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int monitor_filter_add_match_tag(
    ffi.Pointer<udev_monitor_t> udev_monitor,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _monitor_filter_add_match_tag(
      udev_monitor,
      tag,
    );
  }

  late final _monitor_filter_add_match_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_monitor_t>,
              ffi.Pointer<ffi.Char>)>>('udev_monitor_filter_add_match_tag');
  late final _monitor_filter_add_match_tag =
      _monitor_filter_add_match_tagPtr.asFunction<
          int Function(ffi.Pointer<udev_monitor_t>, ffi.Pointer<ffi.Char>)>();

  int monitor_filter_update(
    ffi.Pointer<udev_monitor_t> udev_monitor,
  ) {
    return _monitor_filter_update(
      udev_monitor,
    );
  }

  late final _monitor_filter_updatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_monitor_t>)>>(
      'udev_monitor_filter_update');
  late final _monitor_filter_update = _monitor_filter_updatePtr
      .asFunction<int Function(ffi.Pointer<udev_monitor_t>)>();

  int monitor_filter_remove(
    ffi.Pointer<udev_monitor_t> udev_monitor,
  ) {
    return _monitor_filter_remove(
      udev_monitor,
    );
  }

  late final _monitor_filter_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_monitor_t>)>>(
      'udev_monitor_filter_remove');
  late final _monitor_filter_remove = _monitor_filter_removePtr
      .asFunction<int Function(ffi.Pointer<udev_monitor_t>)>();

  ffi.Pointer<udev_enumerate_t> enumerate_ref(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
  ) {
    return _enumerate_ref(
      udev_enumerate,
    );
  }

  late final _enumerate_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_enumerate_t> Function(
              ffi.Pointer<udev_enumerate_t>)>>('udev_enumerate_ref');
  late final _enumerate_ref = _enumerate_refPtr.asFunction<
      ffi.Pointer<udev_enumerate_t> Function(ffi.Pointer<udev_enumerate_t>)>();

  ffi.Pointer<udev_enumerate_t> enumerate_unref(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
  ) {
    return _enumerate_unref(
      udev_enumerate,
    );
  }

  late final _enumerate_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_enumerate_t> Function(
              ffi.Pointer<udev_enumerate_t>)>>('udev_enumerate_unref');
  late final _enumerate_unref = _enumerate_unrefPtr.asFunction<
      ffi.Pointer<udev_enumerate_t> Function(ffi.Pointer<udev_enumerate_t>)>();

  ffi.Pointer<udev_t> enumerate_get_udev(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
  ) {
    return _enumerate_get_udev(
      udev_enumerate,
    );
  }

  late final _enumerate_get_udevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_t> Function(
              ffi.Pointer<udev_enumerate_t>)>>('udev_enumerate_get_udev');
  late final _enumerate_get_udev = _enumerate_get_udevPtr.asFunction<
      ffi.Pointer<udev_t> Function(ffi.Pointer<udev_enumerate_t>)>();

  ffi.Pointer<udev_enumerate_t> enumerate_new(
    ffi.Pointer<udev_t> udev,
  ) {
    return _enumerate_new(
      udev,
    );
  }

  late final _enumerate_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_enumerate_t> Function(
              ffi.Pointer<udev_t>)>>('udev_enumerate_new');
  late final _enumerate_new = _enumerate_newPtr.asFunction<
      ffi.Pointer<udev_enumerate_t> Function(ffi.Pointer<udev_t>)>();

  int enumerate_add_match_subsystem(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<ffi.Char> subsystem,
  ) {
    return _enumerate_add_match_subsystem(
      udev_enumerate,
      subsystem,
    );
  }

  late final _enumerate_add_match_subsystemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_subsystem');
  late final _enumerate_add_match_subsystem =
      _enumerate_add_match_subsystemPtr.asFunction<
          int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>)>();

  int enumerate_add_nomatch_subsystem(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<ffi.Char> subsystem,
  ) {
    return _enumerate_add_nomatch_subsystem(
      udev_enumerate,
      subsystem,
    );
  }

  late final _enumerate_add_nomatch_subsystemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_nomatch_subsystem');
  late final _enumerate_add_nomatch_subsystem =
      _enumerate_add_nomatch_subsystemPtr.asFunction<
          int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>)>();

  int enumerate_add_match_sysattr(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<ffi.Char> sysattr,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _enumerate_add_match_sysattr(
      udev_enumerate,
      sysattr,
      value,
    );
  }

  late final _enumerate_add_match_sysattrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_sysattr');
  late final _enumerate_add_match_sysattr =
      _enumerate_add_match_sysattrPtr.asFunction<
          int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int enumerate_add_nomatch_sysattr(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<ffi.Char> sysattr,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _enumerate_add_nomatch_sysattr(
      udev_enumerate,
      sysattr,
      value,
    );
  }

  late final _enumerate_add_nomatch_sysattrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_nomatch_sysattr');
  late final _enumerate_add_nomatch_sysattr =
      _enumerate_add_nomatch_sysattrPtr.asFunction<
          int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int enumerate_add_match_property(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<ffi.Char> property,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _enumerate_add_match_property(
      udev_enumerate,
      property,
      value,
    );
  }

  late final _enumerate_add_match_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_property');
  late final _enumerate_add_match_property =
      _enumerate_add_match_propertyPtr.asFunction<
          int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int enumerate_add_match_sysname(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<ffi.Char> sysname,
  ) {
    return _enumerate_add_match_sysname(
      udev_enumerate,
      sysname,
    );
  }

  late final _enumerate_add_match_sysnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_sysname');
  late final _enumerate_add_match_sysname =
      _enumerate_add_match_sysnamePtr.asFunction<
          int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>)>();

  int enumerate_add_match_tag(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _enumerate_add_match_tag(
      udev_enumerate,
      tag,
    );
  }

  late final _enumerate_add_match_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_match_tag');
  late final _enumerate_add_match_tag = _enumerate_add_match_tagPtr.asFunction<
      int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>)>();

  int enumerate_add_match_parent(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<udev_device_t> parent,
  ) {
    return _enumerate_add_match_parent(
      udev_enumerate,
      parent,
    );
  }

  late final _enumerate_add_match_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>,
              ffi.Pointer<udev_device_t>)>>('udev_enumerate_add_match_parent');
  late final _enumerate_add_match_parent =
      _enumerate_add_match_parentPtr.asFunction<
          int Function(
              ffi.Pointer<udev_enumerate_t>, ffi.Pointer<udev_device_t>)>();

  int enumerate_add_match_is_initialized(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
  ) {
    return _enumerate_add_match_is_initialized(
      udev_enumerate,
    );
  }

  late final _enumerate_add_match_is_initializedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_enumerate_t>)>>(
      'udev_enumerate_add_match_is_initialized');
  late final _enumerate_add_match_is_initialized =
      _enumerate_add_match_is_initializedPtr
          .asFunction<int Function(ffi.Pointer<udev_enumerate_t>)>();

  int enumerate_add_syspath(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
    ffi.Pointer<ffi.Char> syspath,
  ) {
    return _enumerate_add_syspath(
      udev_enumerate,
      syspath,
    );
  }

  late final _enumerate_add_syspathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_enumerate_t>,
              ffi.Pointer<ffi.Char>)>>('udev_enumerate_add_syspath');
  late final _enumerate_add_syspath = _enumerate_add_syspathPtr.asFunction<
      int Function(ffi.Pointer<udev_enumerate_t>, ffi.Pointer<ffi.Char>)>();

  int enumerate_scan_devices(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
  ) {
    return _enumerate_scan_devices(
      udev_enumerate,
    );
  }

  late final _enumerate_scan_devicesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_enumerate_t>)>>(
      'udev_enumerate_scan_devices');
  late final _enumerate_scan_devices = _enumerate_scan_devicesPtr
      .asFunction<int Function(ffi.Pointer<udev_enumerate_t>)>();

  int enumerate_scan_subsystems(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
  ) {
    return _enumerate_scan_subsystems(
      udev_enumerate,
    );
  }

  late final _enumerate_scan_subsystemsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_enumerate_t>)>>(
      'udev_enumerate_scan_subsystems');
  late final _enumerate_scan_subsystems = _enumerate_scan_subsystemsPtr
      .asFunction<int Function(ffi.Pointer<udev_enumerate_t>)>();

  ffi.Pointer<udev_list_entry_t> enumerate_get_list_entry(
    ffi.Pointer<udev_enumerate_t> udev_enumerate,
  ) {
    return _enumerate_get_list_entry(
      udev_enumerate,
    );
  }

  late final _enumerate_get_list_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_enumerate_t>)>>('udev_enumerate_get_list_entry');
  late final _enumerate_get_list_entry =
      _enumerate_get_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_enumerate_t>)>();

  ffi.Pointer<udev_queue_t> queue_ref(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_ref(
      udev_queue,
    );
  }

  late final _queue_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_queue_t> Function(
              ffi.Pointer<udev_queue_t>)>>('udev_queue_ref');
  late final _queue_ref = _queue_refPtr.asFunction<
      ffi.Pointer<udev_queue_t> Function(ffi.Pointer<udev_queue_t>)>();

  ffi.Pointer<udev_queue_t> queue_unref(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_unref(
      udev_queue,
    );
  }

  late final _queue_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_queue_t> Function(
              ffi.Pointer<udev_queue_t>)>>('udev_queue_unref');
  late final _queue_unref = _queue_unrefPtr.asFunction<
      ffi.Pointer<udev_queue_t> Function(ffi.Pointer<udev_queue_t>)>();

  ffi.Pointer<udev_t> queue_get_udev(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_get_udev(
      udev_queue,
    );
  }

  late final _queue_get_udevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_t> Function(
              ffi.Pointer<udev_queue_t>)>>('udev_queue_get_udev');
  late final _queue_get_udev = _queue_get_udevPtr
      .asFunction<ffi.Pointer<udev_t> Function(ffi.Pointer<udev_queue_t>)>();

  ffi.Pointer<udev_queue_t> queue_new(
    ffi.Pointer<udev_t> udev,
  ) {
    return _queue_new(
      udev,
    );
  }

  late final _queue_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_queue_t> Function(
              ffi.Pointer<udev_t>)>>('udev_queue_new');
  late final _queue_new = _queue_newPtr
      .asFunction<ffi.Pointer<udev_queue_t> Function(ffi.Pointer<udev_t>)>();

  int queue_get_kernel_seqnum(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_get_kernel_seqnum(
      udev_queue,
    );
  }

  late final _queue_get_kernel_seqnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<udev_queue_t>)>>('udev_queue_get_kernel_seqnum');
  late final _queue_get_kernel_seqnum = _queue_get_kernel_seqnumPtr
      .asFunction<int Function(ffi.Pointer<udev_queue_t>)>();

  int queue_get_udev_seqnum(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_get_udev_seqnum(
      udev_queue,
    );
  }

  late final _queue_get_udev_seqnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<udev_queue_t>)>>('udev_queue_get_udev_seqnum');
  late final _queue_get_udev_seqnum = _queue_get_udev_seqnumPtr
      .asFunction<int Function(ffi.Pointer<udev_queue_t>)>();

  int queue_get_udev_is_active(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_get_udev_is_active(
      udev_queue,
    );
  }

  late final _queue_get_udev_is_activePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_queue_t>)>>(
          'udev_queue_get_udev_is_active');
  late final _queue_get_udev_is_active = _queue_get_udev_is_activePtr
      .asFunction<int Function(ffi.Pointer<udev_queue_t>)>();

  int queue_get_queue_is_empty(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_get_queue_is_empty(
      udev_queue,
    );
  }

  late final _queue_get_queue_is_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_queue_t>)>>(
          'udev_queue_get_queue_is_empty');
  late final _queue_get_queue_is_empty = _queue_get_queue_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<udev_queue_t>)>();

  int queue_get_seqnum_is_finished(
    ffi.Pointer<udev_queue_t> udev_queue,
    int seqnum,
  ) {
    return _queue_get_seqnum_is_finished(
      udev_queue,
      seqnum,
    );
  }

  late final _queue_get_seqnum_is_finishedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<udev_queue_t>,
              ffi.UnsignedLongLong)>>('udev_queue_get_seqnum_is_finished');
  late final _queue_get_seqnum_is_finished = _queue_get_seqnum_is_finishedPtr
      .asFunction<int Function(ffi.Pointer<udev_queue_t>, int)>();

  int queue_get_seqnum_sequence_is_finished(
    ffi.Pointer<udev_queue_t> udev_queue,
    int start,
    int end,
  ) {
    return _queue_get_seqnum_sequence_is_finished(
      udev_queue,
      start,
      end,
    );
  }

  late final _queue_get_seqnum_sequence_is_finishedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<udev_queue_t>, ffi.UnsignedLongLong,
                  ffi.UnsignedLongLong)>>(
      'udev_queue_get_seqnum_sequence_is_finished');
  late final _queue_get_seqnum_sequence_is_finished =
      _queue_get_seqnum_sequence_is_finishedPtr
          .asFunction<int Function(ffi.Pointer<udev_queue_t>, int, int)>();

  int queue_get_fd(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_get_fd(
      udev_queue,
    );
  }

  late final _queue_get_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_queue_t>)>>(
          'udev_queue_get_fd');
  late final _queue_get_fd =
      _queue_get_fdPtr.asFunction<int Function(ffi.Pointer<udev_queue_t>)>();

  int queue_flush(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_flush(
      udev_queue,
    );
  }

  late final _queue_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<udev_queue_t>)>>(
          'udev_queue_flush');
  late final _queue_flush =
      _queue_flushPtr.asFunction<int Function(ffi.Pointer<udev_queue_t>)>();

  ffi.Pointer<udev_list_entry_t> queue_get_queued_list_entry(
    ffi.Pointer<udev_queue_t> udev_queue,
  ) {
    return _queue_get_queued_list_entry(
      udev_queue,
    );
  }

  late final _queue_get_queued_list_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_queue_t>)>>('udev_queue_get_queued_list_entry');
  late final _queue_get_queued_list_entry =
      _queue_get_queued_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry_t> Function(ffi.Pointer<udev_queue_t>)>();

  ffi.Pointer<udev_hwdb_t> hwdb_new(
    ffi.Pointer<udev_t> udev,
  ) {
    return _hwdb_new(
      udev,
    );
  }

  late final _hwdb_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_hwdb_t> Function(
              ffi.Pointer<udev_t>)>>('udev_hwdb_new');
  late final _hwdb_new = _hwdb_newPtr
      .asFunction<ffi.Pointer<udev_hwdb_t> Function(ffi.Pointer<udev_t>)>();

  ffi.Pointer<udev_hwdb_t> hwdb_ref(
    ffi.Pointer<udev_hwdb_t> hwdb,
  ) {
    return _hwdb_ref(
      hwdb,
    );
  }

  late final _hwdb_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_hwdb_t> Function(
              ffi.Pointer<udev_hwdb_t>)>>('udev_hwdb_ref');
  late final _hwdb_ref = _hwdb_refPtr.asFunction<
      ffi.Pointer<udev_hwdb_t> Function(ffi.Pointer<udev_hwdb_t>)>();

  ffi.Pointer<udev_hwdb_t> hwdb_unref(
    ffi.Pointer<udev_hwdb_t> hwdb,
  ) {
    return _hwdb_unref(
      hwdb,
    );
  }

  late final _hwdb_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_hwdb_t> Function(
              ffi.Pointer<udev_hwdb_t>)>>('udev_hwdb_unref');
  late final _hwdb_unref = _hwdb_unrefPtr.asFunction<
      ffi.Pointer<udev_hwdb_t> Function(ffi.Pointer<udev_hwdb_t>)>();

  ffi.Pointer<udev_list_entry_t> hwdb_get_properties_list_entry(
    ffi.Pointer<udev_hwdb_t> hwdb,
    ffi.Pointer<ffi.Char> modalias,
    int flags,
  ) {
    return _hwdb_get_properties_list_entry(
      hwdb,
      modalias,
      flags,
    );
  }

  late final _hwdb_get_properties_list_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_hwdb_t>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('udev_hwdb_get_properties_list_entry');
  late final _hwdb_get_properties_list_entry =
      _hwdb_get_properties_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry_t> Function(
              ffi.Pointer<udev_hwdb_t>, ffi.Pointer<ffi.Char>, int)>();

  int util_encode_string(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> str_enc,
    int len,
  ) {
    return _util_encode_string(
      str,
      str_enc,
      len,
    );
  }

  late final _util_encode_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('udev_util_encode_string');
  late final _util_encode_string = _util_encode_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();
}

final class udev_t extends ffi.Opaque {}

final class udev_list_entry_t extends ffi.Opaque {}

final class udev_device_t extends ffi.Opaque {}

typedef dev_t = ffi.UnsignedLong;

final class udev_monitor_t extends ffi.Opaque {}

final class udev_enumerate_t extends ffi.Opaque {}

final class udev_queue_t extends ffi.Opaque {}

final class udev_hwdb_t extends ffi.Opaque {}
